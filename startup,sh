#!/bin/bash

# Step 1: Configure SSH for root login
echo "Configuring SSH for root login..."
SSH_CONFIG="/etc/ssh/sshd_config"
# Backup original config
cp "$SSH_CONFIG" "${SSH_CONFIG}.bak"

# Update or add required SSH configurations
sed -i 's/#\?PermitRootLogin.*/PermitRootLogin yes/' "$SSH_CONFIG"
sed -i 's/#\?PasswordAuthentication.*/PasswordAuthentication yes/' "$SSH_CONFIG"

# Add configurations if they don't exist
if ! grep -q "^PermitRootLogin" "$SSH_CONFIG"; then
    echo "PermitRootLogin yes" >> "$SSH_CONFIG"
fi
if ! grep -q "^PasswordAuthentication" "$SSH_CONFIG"; then
    echo "PasswordAuthentication yes" >> "$SSH_CONFIG"
fi

# Restart SSH service
echo "Restarting SSH service..."
systemctl restart sshd || systemctl restart ssh || echo "SSH service restart failed."

# Step 2: Update repository to use old-releases if needed
echo "Updating /etc/apt/sources.list to use old-releases.ubuntu.com..."
sed -i '/archive.ubuntu.com/s/^/#/' /etc/apt/sources.list
if ! grep -q "old-releases.ubuntu.com" /etc/apt/sources.list; then
    echo "Adding old-releases.ubuntu.com entries..."
    cat <<EOF >> /etc/apt/sources.list
deb http://old-releases.ubuntu.com/ubuntu mantic main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu mantic-updates main restricted universe multiverse
deb http://old-releases.ubuntu.com/ubuntu mantic-security main restricted universe multiverse
EOF
fi

# Step 3: Update and upgrade the system
echo "Updating and upgrading the system..."
apt update && apt upgrade -y

# Step 4: Install necessary language packs and fix locale issues
echo "Installing necessary language packs and fixing locale issues..."
apt install -y locales language-pack-en language-pack-en-base net-tools || echo "Skipping language packs due to errors."

echo "Generating and configuring locales..."
locale-gen en_US.UTF-8
update-locale LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8
echo -e "LANG=en_US.UTF-8\nLANGUAGE=en_US:en\nLC_ALL=en_US.UTF-8" > /etc/default/locale
source /etc/default/locale

# Step 5: Install required base packages
echo "Installing required packages..."
apt install -y curl gnupg lsb-release apt-transport-https software-properties-common git

# Step 6: Set up Docker repository and install Docker
echo "Setting up Docker repository and installing Docker..."
# Remove any old Docker repositories and keys
rm -f /etc/apt/sources.list.d/docker.list
rm -rf /etc/apt/keyrings/docker.gpg

# Add Docker's official GPG key
mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
chmod a+r /etc/apt/keyrings/docker.gpg

# Set up the Docker repository
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  mantic stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

# Update apt and install Docker
apt update
apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# Step 7: Enable and start Docker service
echo "Starting and enabling Docker service..."
if command -v systemctl &>/dev/null; then
    systemctl enable docker || echo "Docker service enable failed."
    systemctl start docker || echo "Docker service start failed."
else
    echo "Systemd not found; skipping Docker service management."
fi

# Step 8: Verify Docker installation
echo "Verifying Docker installation..."
if command -v docker &>/dev/null; then
    echo "Docker installed successfully. Version: $(docker --version)"
else
    echo "Warning: Docker installation could not be verified."
fi

if command -v docker compose &>/dev/null; then
    echo "Docker Compose installed successfully. Version: $(docker compose version)"
else
    echo "Warning: Docker Compose installation could not be verified."
fi

echo "Startup script execution complete!"
