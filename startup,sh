#!/bin/bash
set -e

# Step 1: Configure SSH for root login
echo "Configuring SSH for root login..."
SSH_CONFIG="/etc/ssh/sshd_config"
# Backup original config
cp "$SSH_CONFIG" "${SSH_CONFIG}.bak"

# Update or add required SSH configurations
sed -i 's/#\?PermitRootLogin.*/PermitRootLogin yes/' "$SSH_CONFIG"
sed -i 's/#\?PasswordAuthentication.*/PasswordAuthentication yes/' "$SSH_CONFIG"

# Add configurations if they don't exist
if ! grep -q "^PermitRootLogin" "$SSH_CONFIG"; then
    echo "PermitRootLogin yes" >> "$SSH_CONFIG"
fi
if ! grep -q "^PasswordAuthentication" "$SSH_CONFIG"; then
    echo "PasswordAuthentication yes" >> "$SSH_CONFIG"
fi

# Restart SSH service
echo "Restarting SSH service..."
systemctl restart sshd || systemctl restart ssh || echo "SSH service restart failed."

# Step 2: Update repository to use Ubuntu 24.04 (Noble) sources
echo "Updating /etc/apt/sources.list for Ubuntu 24.04 Noble..."
# Backup current sources
cp /etc/apt/sources.list /etc/apt/sources.list.bak

# Create new sources.list for Noble
cat > /etc/apt/sources.list <<EOF
deb http://archive.ubuntu.com/ubuntu noble main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu noble-updates main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu noble-security main restricted universe multiverse
EOF

# Step 3: Update and upgrade the system with non-interactive mode
echo "Updating and upgrading the system..."
# Set environment variable to automatically accept all prompts
export DEBIAN_FRONTEND=noninteractive

# Clean any previous lock files
rm -f /var/lib/apt/lists/lock
rm -f /var/cache/apt/archives/lock
rm -f /var/lib/dpkg/lock*

# Update and upgrade with automatic conflict resolution
apt update
yes "" | apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade -y

# Step 4: Install necessary language packs and fix locale issues
echo "Installing necessary language packs and fixing locale issues..."
DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y locales language-pack-en language-pack-en-base net-tools || echo "Skipping language packs due to errors."

echo "Generating and configuring locales..."
locale-gen en_US.UTF-8
update-locale LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8
echo -e "LANG=en_US.UTF-8\nLANGUAGE=en_US:en\nLC_ALL=en_US.UTF-8" > /etc/default/locale
export LANG=en_US.UTF-8
export LANGUAGE=en_US:en
export LC_ALL=en_US.UTF-8

# Step 5: Handle package dependencies first
echo "Handling package dependencies..."
# Make sure we have a clean slate
apt clean
apt autoclean

# Fix broken packages before proceeding
DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -f install -y
DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" --fix-broken install -y

# Step 6: Install required base packages - one by one to better handle errors
echo "Installing required packages..."
# Install curl first since it's needed for Docker
DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y curl || echo "curl installation issue, continuing..."
DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y python-is-python3 || echo "python-is-python3 installation issue, continuing..."
DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y python3-pip || echo "python3-pip installation issue, continuing..."
DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y lsb-release || echo "lsb-release installation issue, continuing..."
DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y apt-transport-https || echo "apt-transport-https installation issue, continuing..."
DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y software-properties-common || echo "software-properties-common installation issue, continuing..."
DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y git || echo "git installation issue, continuing..."
DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y ca-certificates || echo "ca-certificates installation issue, continuing..."

# Special handling for gnupg which often causes dependency issues
echo "Specially handling gnupg installation..."
# Try multiple methods to install gnupg
yes | DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y gnupg || {
    echo "Attempting alternative gnupg installation method..."
    # Try aptitude which is better at resolving dependency conflicts
    DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y aptitude || true
    yes | DEBIAN_FRONTEND=noninteractive aptitude -y install gnupg || {
        # Try with --no-install-recommends
        DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y --no-install-recommends gnupg || {
            echo "gnupg installation still problematic, continuing with Docker setup anyway..."
        }
    }
}

# Step 7: Set up Docker repository and install Docker
echo "Setting up Docker repository and installing Docker..."
# Remove any old Docker repositories and keys
rm -f /etc/apt/sources.list.d/docker*.list
rm -f /etc/apt/keyrings/docker.gpg

# Create directory for Docker GPG key
mkdir -p /etc/apt/keyrings

# Download and add Docker's official GPG key with robust error handling
if curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /tmp/docker.gpg; then
    if command -v gpg &> /dev/null; then
        gpg --dearmor -o /etc/apt/keyrings/docker.gpg /tmp/docker.gpg
    else
        # Fallback if gpg is not working
        cat /tmp/docker.gpg | tee /etc/apt/keyrings/docker.asc > /dev/null
        echo "Warning: gpg not available, using alternative method for Docker key"
    fi
    chmod a+r /etc/apt/keyrings/docker.gpg 2>/dev/null || true
    chmod a+r /etc/apt/keyrings/docker.asc 2>/dev/null || true
else
    echo "Warning: Failed to download Docker GPG key, trying alternative method"
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 9DC858229FC7DD38854AE2D88D81803C0EBFCD88 || true
fi

# Add Docker repository using Noble (24.04) codename
if [ -f /etc/apt/keyrings/docker.gpg ]; then
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu noble stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
elif [ -f /etc/apt/keyrings/docker.asc ]; then
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu noble stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
else
    # Fallback method if GPG import fails
    echo "deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/ubuntu noble stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
fi

# Update apt package index
DEBIAN_FRONTEND=noninteractive apt-get update || { echo "Warning: apt update failed, attempting to continue"; true; }

# Install Docker packages with error handling for each
echo "Installing Docker components one by one..."
yes "" | DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y docker-ce || echo "docker-ce installation failed, continuing..."
yes "" | DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y docker-ce-cli || echo "docker-ce-cli installation failed, continuing..."
yes "" | DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y containerd.io || echo "containerd.io installation failed, continuing..."
yes "" | DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y docker-buildx-plugin || echo "docker-buildx-plugin installation failed, continuing..."
yes "" | DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y docker-compose-plugin || echo "docker-compose-plugin installation failed, continuing..."

# Step 8: Enable and start Docker service
echo "Starting and enabling Docker service..."
if command -v systemctl &>/dev/null; then
    systemctl enable docker || echo "Docker service enable failed."
    systemctl start docker || echo "Docker service start failed."
else
    echo "Systemd not found; skipping Docker service management."
fi

# Step 9: Final cleanup and fixing
echo "Running final cleanup and dependency resolution..."
DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -f install -y
DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" autoremove -y
DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" autoclean

# Step 10: Verify Docker installation
echo "Verifying Docker installation..."
if command -v docker &>/dev/null; then
    echo "Docker installed successfully. Version: $(docker --version)"
else
    echo "Warning: Docker installation could not be verified."
    # Diagnostic information 
    echo "Diagnostic information for troubleshooting:"
    echo "-------------------------------------------"
    dpkg -l | grep -E 'docker|containerd'
    systemctl status docker || true
    journalctl -u docker --no-pager -n 20 || true
fi

if command -v docker compose &>/dev/null; then
    echo "Docker Compose installed successfully. Version: $(docker compose version)"
else
    echo "Warning: Docker Compose installation could not be verified."
fi

echo "Startup script execution complete!"
